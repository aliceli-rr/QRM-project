a_array[0]
a_array[1]
ranka_array<-rep(x = length(a_array))
ranka_array
ranka_array[2]
ranka_array<-rep(0,length(a_array))
ranka_array
order(a_array)
sort(a_array)
#d)
ranka_array<-rep(0,length(a_array))
for(ii in 1:length(a_array)){
ranka<-which(sort(a_array)==arr_a_array[ii])
}
ranka_array<-rep(0,length(a_array))
for(ii in 1:length(a_array)){
ranka_array[ii]<-which(sort(a_array)==a_array[ii])
}
ranka_array
ranka_array<-rep(0,length(a_array))
for(ii in 1:length(a_array)){
ranka_array[ii]<-which(sort(a_array)==a_array[ii])
}
rankb_array<-rep(0,length(b_array))
for(ii in 1:length(b_array)){
rankb_array[ii]<-which(sort(b_array)==b_array[ii])
}
plot(ranka_array, rankb_array, main="Scatterplot Of Probability Transformed Pairs Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
plot(a_array, b_array, main="Scatterplot between Stock A and Stock B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
plot(ranka_array, rankb_array, main="Scatterplot Of Probability Transformed Pairs Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
ranka_array<-rep(0,length(a_array))
for(ii in 1:length(a_array)){
ranka_array[ii]<-which(sort(a_array)==a_array[ii])/(length(a_array)+1)
}
rankb_array<-rep(0,length(b_array))
for(ii in 1:length(b_array)){
rankb_array[ii]<-which(sort(b_array)==b_array[ii])/(length(b_array)+1)
}
plot(ranka_array, rankb_array, main="Scatterplot Of Probability Transformed Pairs Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
library("tseries")
#install package tseries
jarque.bera.test(a_array)
jarque.bera.test(b_array)
plot(ranka_array, rankb_array, main="Scatterplot Of Probability Transformed Pairs Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return")
qqplot(a_array)
qqnorm(a_array)
qqnorm(ranka_array)
ranka_array
qqnorm(a_array)
qqnorm(norm(1))
qqnorm(norm(1,0))
rm(list=ls())
setwd("C:/Users/Tong/Desktop/UWaterloo/2017 Summer/ACTSC445/A4")
library("tseries")
#a)
RY<-read.csv("RY.csv")
MS<-read.csv("MS.csv")
a_array <- rep(0,nrow(RY)-1)
b_array <- rep(0,nrow(MS)-1)
for (i in 1:nrow(RY)-1){
a_array[i] = -100*log(RY$Adj.Close[i+1]/RY$Adj.Close[i])
}
for (i in 1:nrow(MS)-1){
b_array[i] = -100*log(MS$Adj.Close[i+1]/MS$Adj.Close[i])
}
plot.ts(a_array,ylab="RY log return")
plot.ts(b_array,ylab="MS log return")
#b)
#install package tseries
jarque.bera.test(a_array)
jarque.bera.test(b_array)
#c)
plot(a_array, b_array, main="Scatterplot between Stock A and Stock B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
#d)
ra<-rank(a_array,ties.method = 'random')
rb<-rank(b_array,ties.method = 'random')
n<-length(a_array)
ranka_array<-ra/(n+1)
rankb_array<-rb/(n+1)
plot(ranka_array, rankb_array, main="Scatterplot Of Probability Transformed Pairs Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return")
install.packages("Kendall")
library("Kendall")
Kendall(ra,rb)
UR50=c(ra>0.5,rb>0.5)
Kendall(ra>0.5,rb>0.5)
Kendall(ra,rb)
Kendall(ra>0.5,rb>0.5)
UR50=c(ra,rb)[ra>0.5&rb>0.5]
Kendall(UR50[1],UR50[2])
UR50
UR50=cbind(ra,rb)[ra>0.5&rb>0.5]
Kendall(UR50[1],UR50[2])
Kendall(UR50[,1],UR50[,2])
UR50=cbind(ra,rb)[ra>0.5&rb>0.5,]
Kendall(UR50[,1],UR50[,2])
Kendall(UR50[1],UR50[2])
Kendall(ra,rb)
UR50=cbind(ra,rb)[ra>0.5&rb>0.5,]
Kendall(UR50[,1],UR50[,2])
UR50=cbind(ra,rb)[ra>0.7&rb>0.7,]
Kendall(UR50[,1],UR50[,2])
Kendall(ra,rb)
rab=cbind(ra,rb)
UR50=U[ra>0.5&rb>0.5,]
UR50=rab[ra>0.5&rb>0.5,]
Kendall(UR50[,1],UR50[,2])
Kendall(ra,rb)
rab<-cbind(ra,rb)
UR50<-rab[ra>0.5&rb>0.5,]
Kendall(UR50[,1],UR50[,2])
UR50<-rab[ra>0.8&rb>0.8,]
Kendall(UR50[,1],UR50[,2])
UR50<-rab[ra<0.1&rb<0.1,]
Kendall(UR50[,1],UR50[,2])
Kendall(ra,rb)
rab<-cbind(ra,rb)
UR50<-rab[ra<0.1&rb<0.1,]
Kendall(UR50[,1],UR50[,2])
Kendall(ra,rb)
rab<-cbind(ra,rb)
UR50<-rab[ra<0.1 & rb<0.1,]
Kendall(UR50[,1],UR50[,2])
ranka_array<-rank(a_array,ties.method = 'random')
rankb_array<-rank(b_array,ties.method = 'random')
n<-length(a_array)
ra<-ranka_array/(n+1)
rb<-ranka_array/(n+1)
Kendall(ra,rb)
rab<-cbind(ra,rb)
UR50<-rab[ra<0.1 & rb<0.1,]
Kendall(UR50[,1],UR50[,2])
rm(list=ls())
setwd("C:/Users/Tong/Desktop/UWaterloo/2017 Summer/ACTSC445/A4")
library("tseries")
library("Kendall")
#1)
RY<-read.csv("RY.csv")
MS<-read.csv("MS.csv")
a_array <- rep(0,nrow(RY)-1)
b_array <- rep(0,nrow(MS)-1)
for (i in 1:nrow(RY)-1){
a_array[i] = -100*log(RY$Adj.Close[i+1]/RY$Adj.Close[i])
}
for (i in 1:nrow(MS)-1){
b_array[i] = -100*log(MS$Adj.Close[i+1]/MS$Adj.Close[i])
}
plot.ts(a_array,ylab="RY log return")
plot.ts(b_array,ylab="MS log return")
#2)
#install package tseries
jarque.bera.test(a_array)
jarque.bera.test(b_array)
#3)
plot(a_array, b_array, main="Scatterplot between Stock A and Stock B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
#4)
ranka_array<-rank(a_array,ties.method = 'random')
rankb_array<-rank(b_array,ties.method = 'random')
n<-length(a_array)
ra<-ranka_array/(n+1)
rb<-ranka_array/(n+1)
plot(ra, rb, main="Scatterplot Of Rank Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return")
#5)
#a)
Kendall(ra,rb)
rab<-cbind(ra,rb)
UR50<-rab[ra>0.5 & rb>0.5,]
Kendall(UR50[,1],UR50[,2])
ranka_array<-rank(a_array,ties.method = 'random')
rankb_array<-rank(b_array,ties.method = 'random')
n<-length(a_array)
ra<-ranka_array/(n+1)
rb<-ranka_array/(n+1)
ra
rb
plot(ra, rb, main="Scatterplot Of Rank Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return")
n
?rank
ranka_array
rankb_array
#4)
ranka_array<-rank(a_array, ties.method = 'random')
rankb_array<-rank(b_array, ties.method = 'random')
n<-length(a_array)
ra<-ranka_array/(n+1)
rb<-rankb_array/(n+1)
plot(ra, rb, main="Scatterplot Of Rank Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return")
#5)
#a)
Kendall(ra,rb)
rab<-cbind(ra,rb)
UR50<-rab[ra>0.5 & rb>0.5,]
Kendall(UR50[,1],UR50[,2])
#Upper right conner of top 60%
UR50<-rab[ra>0.6 & rb>0.6,]
Kendall(UR50[,1],UR50[,2])
#Upper right conner of top 70%
UR50<-rab[ra>0.7 & rb>0.7,]
Kendall(UR50[,1],UR50[,2])
#Upper right conner of top 80%
UR50<-rab[ra>0.8 & rb>0.8,]
Kendall(UR50[,1],UR50[,2])
#5)
#a)
Kendall(ra,rb)
rab<-cbind(ra,rb)
#Upper right conner of top 50%
UR50<-rab[ra>0.5 & rb>0.5,]
Kendall(UR50[,1],UR50[,2])
#Upper right conner of top 60%
UR60<-rab[ra>0.6 & rb>0.6,]
Kendall(UR60[,1],UR60[,2])
#Upper right conner of top 70%
UR70<-rab[ra>0.7 & rb>0.7,]
Kendall(UR70[,1],UR70[,2])
#Upper right conner of top 80%
UR80<-rab[ra>0.8 & rb>0.8,]
Kendall(UR80[,1],UR80[,2])
#Lower left conner of top 50%
LL50<-rab[ra<0.5 & rb<0.5,]
Kendall(LL50[,1],LL50[,2])
#Lower left conner of top 40%
LL40<-rab[ra<0.4 & rb<0.4,]
Kendall(LL40[,1],LL40[,2])
#Lower left conner of top 30%
LL30<-rab[ra<0.3 & rb<0.3,]
Kendall(LL30[,1],LL30[,2])
#Lower left conner of top 20%
LL20<-rab[ra<0.2 & rb<0.2,]
Kendall(LL20[,1],LL20[,2])
?Kendell
??Kendell
Kendall(ra,rb)
Kendall(ranka_array,rankb_array)
install.packages("copula")
library("tseries")
library("Kendall")
library("QRM")
library("evd")
library("copula")
?fit.AC
?AIC
rm(list=ls())
setwd("C:/Users/Tong/Desktop/UWaterloo/2017 Summer/ACTSC445/A4")
library("tseries")
library("Kendall")
library("QRM")
library("evd")
library("copula")
#1)
RY<-read.csv("RY.csv")
MS<-read.csv("MS.csv")
a_array <- rep(0,nrow(RY)-1)
b_array <- rep(0,nrow(MS)-1)
for (i in 1:nrow(RY)-1){
a_array[i] = -100*log(RY$Adj.Close[i+1]/RY$Adj.Close[i])
}
for (i in 1:nrow(MS)-1){
b_array[i] = -100*log(MS$Adj.Close[i+1]/MS$Adj.Close[i])
}
plot.ts(a_array,ylab="RY log return")
plot.ts(b_array,ylab="MS log return")
#2)
#install package tseries
jarque.bera.test(a_array)
jarque.bera.test(b_array)
#3)
plot(a_array, b_array, main="Scatterplot between Stock A and Stock B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
#4)
ranka_array<-rank(a_array, ties.method = 'random')
rankb_array<-rank(b_array, ties.method = 'random')
n<-length(a_array)
ra<-ranka_array/(n+1)
rb<-rankb_array/(n+1)
plot(ra, rb, main="Scatterplot Of Rank Of Stock A and B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return")
#5)
#a)
Kendall(ra,rb)
rab<-cbind(ra,rb)
#Upper right conner of top 70%
UR70<-rab[ra>0.7 & rb>0.7,]
Kendall(UR70[,1],UR70[,2])
#Upper right conner of top 80%
UR80<-rab[ra>0.8 & rb>0.8,]
Kendall(UR80[,1],UR80[,2])
#Upper right conner of top 95%
UR95<-rab[ra>0.95 & rb>0.95,]
Kendall(UR95[,1],UR95[,2])
#Upper right conner of top 99%
UR99<-rab[ra>0.99 & rb>0.99,]
Kendall(UR99[,1],UR99[,2])
#Upper right conner of top 99.5%
UR995<-rab[ra>0.995 & rb>0.995,]
Kendall(UR995[,1],UR995[,2])
#Lower left conner of top 30%
LL30<-rab[ra<0.3 & rb<0.3,]
Kendall(LL30[,1],LL30[,2])
#Lower left conner of top 20%
LL20<-rab[ra<0.2 & rb<0.2,]
Kendall(LL20[,1],LL20[,2])
#Lower left conner of top 5%
LL5<-rab[ra<0.05 & rb<0.05,]
Kendall(LL5[,1],LL5[,2])
#Lower left conner of top 1%
LL1<-rab[ra<0.01 & rb<0.01,]
Kendall(LL1[,1],LL1[,2])
#Lower left conner of top 0.5%
LL05<-rab[ra<0.005 & rb<0.005,]
Kendall(LL05[,1],LL05[,2])
#b)
UTD95 <- length(rab[ra>0.95 & rb > 0.95])/length(rab[rb > 0.95])
UTD99 <- length(rab[ra>0.99 & rb > 0.99])/length(rab[rb > 0.99])
UTD995 <-length(rab[ra>0.995 & rb > 0.995,])/length(rab[rb > 0.995])
LTD5 <- length(rab[ra<0.05 & rb < 0.05])/length(rab[rb < 0.05])
LTD1 <- length(rab[ra<0.01 & rb < 0.01])/length(rab[rb < 0.01])
LTD05 <- length(rab[ra<0.005 & rb < 0.005])/length(rab[rb < 0.005])
UTD95a <- length(rab[ra>0.95 & rb > 0.95])/length(rab[ra > 0.95])
UTD99a <- length(rab[ra>0.99 & rb > 0.99])/length(rab[ra > 0.99])
UTD995a <-length(rab[ra>0.995 & rb > 0.995,])/length(rab[ra > 0.995])
LTD5a <- length(rab[ra<0.05 & rb < 0.05])/length(rab[ra < 0.05])
LTD1a <- length(rab[ra<0.01 & rb < 0.01])/length(rab[ra < 0.01])
LTD05a <- length(rab[ra<0.005 & rb < 0.005])/length(rab[ra < 0.005])
#c)
#6
#Gumbel
gumfit <- fit.AC(rab, name = "gumbel")
#Gaussian
gausfit <- fit.gausscopula(rab)
#student t
tfit <- fit.tcopula(rab)
plot.ts(a_array,ylab="Log Return", main="Royal Bank Stock Log Return")
plot.ts(b_array,ylab="Log Return", main="Morgan Stanley Stock Log Return")
jarque.bera.test(a_array)
jarque.bera.test(b_array)
Kendall(ra,rb)
rab<-cbind(ra,rb)
#Upper right conner of top 70%
UR70<-rab[ra>0.7 & rb>0.7,]
Kendall(UR70[,1],UR70[,2])
#Upper right conner of top 80%
UR80<-rab[ra>0.8 & rb>0.8,]
Kendall(UR80[,1],UR80[,2])
#Upper right conner of top 95%
UR95<-rab[ra>0.95 & rb>0.95,]
Kendall(UR95[,1],UR95[,2])
#Upper right conner of top 99%
UR99<-rab[ra>0.99 & rb>0.99,]
Kendall(UR99[,1],UR99[,2])
#Upper right conner of top 99.5%
UR995<-rab[ra>0.995 & rb>0.995,]
Kendall(UR995[,1],UR995[,2])
#Lower left conner of top 30%
LL30<-rab[ra<0.3 & rb<0.3,]
Kendall(LL30[,1],LL30[,2])
#Lower left conner of top 20%
LL20<-rab[ra<0.2 & rb<0.2,]
Kendall(LL20[,1],LL20[,2])
#Lower left conner of top 5%
LL5<-rab[ra<0.05 & rb<0.05,]
Kendall(LL5[,1],LL5[,2])
#Lower left conner of top 1%
LL1<-rab[ra<0.01 & rb<0.01,]
Kendall(LL1[,1],LL1[,2])
#Lower left conner of top 0.5%
LL05<-rab[ra<0.005 & rb<0.005,]
Kendall(LL05[,1],LL05[,2])
UTD95 <- length(rab[ra>0.95 & rb > 0.95])/length(rab[rb > 0.95])
UTD99 <- length(rab[ra>0.99 & rb > 0.99])/length(rab[rb > 0.99])
UTD995 <-length(rab[ra>0.995 & rb > 0.995,])/length(rab[rb > 0.995])
LTD5 <- length(rab[ra<0.05 & rb < 0.05])/length(rab[rb < 0.05])
LTD1 <- length(rab[ra<0.01 & rb < 0.01])/length(rab[rb < 0.01])
LTD05 <- length(rab[ra<0.005 & rb < 0.005])/length(rab[rb < 0.005])
UTD95a <- length(rab[ra>0.95 & rb > 0.95])/length(rab[ra > 0.95])
UTD99a <- length(rab[ra>0.99 & rb > 0.99])/length(rab[ra > 0.99])
UTD995a <-length(rab[ra>0.995 & rb > 0.995,])/length(rab[ra > 0.995])
LTD5a <- length(rab[ra<0.05 & rb < 0.05])/length(rab[ra < 0.05])
LTD1a <- length(rab[ra<0.01 & rb < 0.01])/length(rab[ra < 0.01])
LTD05a <- length(rab[ra<0.005 & rb < 0.005])/length(rab[ra < 0.005])
LL15<-rab[ra<0.15 & rb<0.15,]
Kendall(LL15[,1],LL15[,2])
#6
#Gumbel
gumfit <- fit.AC(rab, name = "gumbel")
#Gaussian
gausfit <- fit.gausscopula(rab)
#student t
tfit <- fit.tcopula(rab)
gumfit
gausfit
tfit
gumllmax<-gumfit$ll.max
gausllmax<-gausfit$ll.max
tllmax<-tfit$ll.max
gumAIC<- -2*gumllmax+2
gausAIC<- -2*gausllmax+2
tAIC<- -2*tllmax+4
gumAIC
gausAIC
tAIC
plot(a_array, b_array, main="Scatterplot of Stock A and Stock B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
plot(ra, rb, main="Scatterplot of Stock A and B Rank",
xlab="Royal Bank Log Return Rank", ylab="Morgan Stanley Log Return Rank")
rm(list=ls())
#setwd("C:/Users/Tong/Desktop/UWaterloo/2017 Summer/ACTSC445/A4")
library("tseries")
library("Kendall")
library("QRM")
library("evd")
library("copula")
#1)
RY<-read.csv("RY.csv")
MS<-read.csv("MS.csv")
a_array <- rep(0,nrow(RY)-1)
b_array <- rep(0,nrow(MS)-1)
for (i in 1:nrow(RY)-1){
a_array[i] = -100*log(RY$Adj.Close[i+1]/RY$Adj.Close[i])
}
for (i in 1:nrow(MS)-1){
b_array[i] = -100*log(MS$Adj.Close[i+1]/MS$Adj.Close[i])
}
plot.ts(a_array,ylab="Log Return", main="Royal Bank Stock Log Return")
plot.ts(b_array,ylab="Log Return", main="Morgan Stanley Stock Log Return")
#2)
#install package tseries
jarque.bera.test(a_array)
jarque.bera.test(b_array)
#3)
plot(a_array, b_array, main="Scatterplot of Stock A and Stock B",
xlab="Royal Bank Log Return", ylab="Morgan Stanley Log Return", pch=19)
#4)
ranka_array<-rank(a_array, ties.method = 'random')
rankb_array<-rank(b_array, ties.method = 'random')
n<-length(a_array)
ra<-ranka_array/(n+1)
rb<-rankb_array/(n+1)
plot(ra, rb, main="Scatterplot of Stock A and B Rank",
xlab="Royal Bank Log Return Rank", ylab="Morgan Stanley Log Return Rank")
#5)
#a)
Kendall(ra,rb)
rab<-cbind(ra,rb)
#Upper right conner of top 70%
UR70<-rab[ra>0.7 & rb>0.7,]
Kendall(UR70[,1],UR70[,2])
#Upper right conner of top 80%
UR80<-rab[ra>0.8 & rb>0.8,]
Kendall(UR80[,1],UR80[,2])
#Upper right conner of top 95%
UR95<-rab[ra>0.95 & rb>0.95,]
Kendall(UR95[,1],UR95[,2])
#Upper right conner of top 99%
UR99<-rab[ra>0.99 & rb>0.99,]
Kendall(UR99[,1],UR99[,2])
#Upper right conner of top 99.5%
UR995<-rab[ra>0.995 & rb>0.995,]
Kendall(UR995[,1],UR995[,2])
#Lower left conner of top 30%
LL30<-rab[ra<0.3 & rb<0.3,]
Kendall(LL30[,1],LL30[,2])
#Lower left conner of top 20%
LL20<-rab[ra<0.2 & rb<0.2,]
Kendall(LL20[,1],LL20[,2])
#Lower left conner of top 5%
LL5<-rab[ra<0.05 & rb<0.05,]
Kendall(LL5[,1],LL5[,2])
#Lower left conner of top 1%
LL1<-rab[ra<0.01 & rb<0.01,]
Kendall(LL1[,1],LL1[,2])
#Lower left conner of top 0.5%
LL05<-rab[ra<0.005 & rb<0.005,]
Kendall(LL05[,1],LL05[,2])
#b)
UTD95 <- length(rab[ra>0.95 & rb > 0.95])/length(rab[rb > 0.95])
UTD99 <- length(rab[ra>0.99 & rb > 0.99])/length(rab[rb > 0.99])
UTD995 <-length(rab[ra>0.995 & rb > 0.995,])/length(rab[rb > 0.995])
LTD5 <- length(rab[ra<0.05 & rb < 0.05])/length(rab[rb < 0.05])
LTD1 <- length(rab[ra<0.01 & rb < 0.01])/length(rab[rb < 0.01])
LTD05 <- length(rab[ra<0.005 & rb < 0.005])/length(rab[rb < 0.005])
UTD95a <- length(rab[ra>0.95 & rb > 0.95])/length(rab[ra > 0.95])
UTD99a <- length(rab[ra>0.99 & rb > 0.99])/length(rab[ra > 0.99])
UTD995a <-length(rab[ra>0.995 & rb > 0.995,])/length(rab[ra > 0.995])
LTD5a <- length(rab[ra<0.05 & rb < 0.05])/length(rab[ra < 0.05])
LTD1a <- length(rab[ra<0.01 & rb < 0.01])/length(rab[ra < 0.01])
LTD05a <- length(rab[ra<0.005 & rb < 0.005])/length(rab[ra < 0.005])
#c)
#6
#Gumbel 1
gumfit <- fit.AC(rab, name = "gumbel")
#Gaussian 1
gausfit <- fit.gausscopula(rab)
#student t 2
tfit <- fit.tcopula(rab)
gumllmax<-gumfit$ll.max
gausllmax<-gausfit$ll.max
tllmax<-tfit$ll.max
gumAIC<- -2*gumllmax+2
gausAIC<- -2*gausllmax+2
tAIC<- -2*tllmax+4
LL1
